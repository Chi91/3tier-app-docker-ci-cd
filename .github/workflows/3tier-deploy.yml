
name: 3-tier-Application

on:
    push:
        branches: [ "main" ]

jobs:
    build-job:
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4

            - name: Setup dotnet
              uses: actions/setup-dotnet@v3
              with:
                dotnet-version: '7.0.x'

            - name: Build & test backend
              working-directory: api
              run: |
                dotnet restore ./Basic3TierAPI/Basic3TierAPI.csproj
                dotnet build ./Basic3TierAPI/Basic3TierAPI.csproj
                dotnet test ./Basic3TierAPI/Basic3TierAPI.csproj
                dotnet pack ./Basic3TierAPI/Basic3TierAPI.csproj

    analyse:
        name: Build and analyze
        runs-on: windows-latest
        needs: build-job
    
        steps:
            - uses: actions/checkout@v4
              with:
                fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
            - name: Set up JDK 17
              uses: actions/setup-java@v1
              with:
                java-version: 17
            - name: Cache SonarQube packages
              uses: actions/cache@v1
              with:
                path: ~\.sonar\cache
                key: ${{ runner.os }}-sonar
                restore-keys: ${{ runner.os }}-sonar
            - name: Cache SonarQube scanner
              id: cache-sonar-scanner
              uses: actions/cache@v1
              with:
                path: .\.sonar\scanner
                key: ${{ runner.os }}-sonar-scanner
                restore-keys: ${{ runner.os }}-sonar-scanner
            - name: Install SonarQube scanner
              if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
              shell: powershell
              run: |
                New-Item -Path .\.sonar\scanner -ItemType Directory
                dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
            - name: Build and analyze
              shell: powershell
              run: |
                .\.sonar\scanner\dotnet-sonarscanner begin /k:"3tier-docker-chi" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}"
                dotnet build ./api/Basic3TierAPI/Basic3TierAPI.csproj
                .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"


    docker-build-push-job:
      name: Build & push Docker Image
      runs-on: Ubuntu-latest
    
      steps:
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3
          
        - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME}}
            password: ${{secrets.DOCKERHUB_TOKEN}}
        
        - name: Build & push images backend
          uses: docker/build-push-action@v6
          with:
            file: ./api/Dockerfile 
            push: true
            tags: chi91/3tier-backend-cicd:latest
        
        - name: Build & push images backend
          uses: docker/build-push-action@v6
          with:
            file: ./ui/Dockerfile 
            push: true
            tags: chi91/3tier-frontend-cicd:latest

    release-job: 
      runs-on: ubuntu-latest
      needs: docker-build-push-job
      steps: 
        - name: Set permission for SSH Key 
          run: |
            mkdir -p ~/.ssh
            echo "${{secrets.KEY_EC2}}" > ~/.ssh/id_rsa
            chmod 400 ~/.ssh/id_rsa
            ssh-keyscan ${{vars.EC2_PUBLIC_IP_ADRESS}} >> ~/.ssh/known_hosts

        - name: Prepare EC2 instance
          run: |
            ssh -i ~/.ssh/id_rsa ${{vars.EC2_USER}}@${{vars.EC2_PUBLIC_IP_ADRESS}}<< 'EOF'
              sudo apt-get update
              sudo apt-get install -y ca-certificates curl
              sudo install -m 0755 -d /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/keyrings/docker.asc > /dev/null
              sudo chmod a+r /etc/apt/keyrings/docker.asc

              . /etc/os-release
              echo "deb [arch=\$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \$VERSION_CODENAME stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              
              sudo apt-get update
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
              
              sudo docker run --name 3tierBackend -d chi91/3tier-backend-cicd
              sudo docker run --name 3tierFrontend -d chi91/3tier-frontend-cicd
            EOF
  

        


        
  



    


